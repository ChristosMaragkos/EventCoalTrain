<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/EventCoalTrain.Tests/EventCoalTrain.Tests.csproj">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/EventCoalTrain.Tests/EventCoalTrain.Tests.csproj" />
              <option name="originalContent" value="&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;&#10;&#10;    &lt;PropertyGroup&gt;&#10;        &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;&#10;        &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;&#10;        &lt;Nullable&gt;enable&lt;/Nullable&gt;&#10;&#10;        &lt;IsPackable&gt;false&lt;/IsPackable&gt;&#10;        &lt;IsTestProject&gt;true&lt;/IsTestProject&gt;&#10;    &lt;/PropertyGroup&gt;&#10;&#10;    &lt;ItemGroup&gt;&#10;        &lt;PackageReference Include=&quot;coverlet.collector&quot; Version=&quot;6.0.0&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;Microsoft.NET.Test.Sdk&quot; Version=&quot;17.8.0&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;xunit&quot; Version=&quot;2.5.3&quot;/&gt;&#10;        &lt;PackageReference Include=&quot;xunit.runner.visualstudio&quot; Version=&quot;2.5.3&quot;/&gt;&#10;    &lt;/ItemGroup&gt;&#10;&#10;    &lt;ItemGroup&gt;&#10;        &lt;Using Include=&quot;Xunit&quot;/&gt;&#10;    &lt;/ItemGroup&gt;&#10;&#10;&lt;/Project&gt;&#10;" />
              <option name="updatedContent" value="&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;&#13;&#10;&#13;&#10;    &lt;PropertyGroup&gt;&#13;&#10;        &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;&#13;&#10;        &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;&#13;&#10;        &lt;Nullable&gt;enable&lt;/Nullable&gt;&#13;&#10;&#13;&#10;        &lt;IsPackable&gt;false&lt;/IsPackable&gt;&#13;&#10;        &lt;IsTestProject&gt;true&lt;/IsTestProject&gt;&#13;&#10;    &lt;/PropertyGroup&gt;&#13;&#10;&#13;&#10;    &lt;ItemGroup&gt;&#13;&#10;        &lt;PackageReference Include=&quot;coverlet.collector&quot; Version=&quot;6.0.0&quot;/&gt;&#13;&#10;        &lt;PackageReference Include=&quot;Microsoft.NET.Test.Sdk&quot; Version=&quot;17.8.0&quot;/&gt;&#13;&#10;        &lt;PackageReference Include=&quot;xunit&quot; Version=&quot;2.5.3&quot;/&gt;&#13;&#10;        &lt;PackageReference Include=&quot;xunit.runner.visualstudio&quot; Version=&quot;2.5.3&quot;/&gt;&#13;&#10;    &lt;/ItemGroup&gt;&#13;&#10;&#13;&#10;    &lt;ItemGroup&gt;&#13;&#10;        &lt;Using Include=&quot;Xunit&quot;/&gt;&#13;&#10;    &lt;/ItemGroup&gt;&#13;&#10;&#13;&#10;    &lt;ItemGroup&gt;&#13;&#10;        &lt;ProjectReference Include=&quot;..\EventCoalTrain.csproj&quot; /&gt;&#13;&#10;    &lt;/ItemGroup&gt;&#13;&#10;&#13;&#10;&lt;/Project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/EventCoalTrain.csproj">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/EventCoalTrain.csproj" />
              <option name="originalContent" value="&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;&#10;&#10;    &lt;PropertyGroup&gt;&#10;        &lt;TargetFrameworks&gt;net8.0;netstandard2.1&lt;/TargetFrameworks&gt;&#10;        &lt;LangVersion&gt;latestMajor&lt;/LangVersion&gt;&#10;        &lt;GenerateDocumentationFile&gt;true&lt;/GenerateDocumentationFile&gt;&#10;        &lt;PackageId&gt;EventCoalTrain&lt;/PackageId&gt;&#10;        &lt;Version&gt;1.0.0&lt;/Version&gt;&#10;        &lt;Authors&gt;Christos Maragkos&lt;/Authors&gt;&#10;        &lt;Description&gt;Event system for Godot (.NET 9.0) and Unity (.NET Standard 2.1).&lt;/Description&gt;&#10;        &lt;RepositoryUrl&gt;https://github.com/ChristosMaragkos/EventCoalTrain&lt;/RepositoryUrl&gt;&#10;        &lt;PackageLicenseExpression&gt;MIT&lt;/PackageLicenseExpression&gt;&#10;        &lt;PackageProjectUrl&gt;https://github.com/ChristosMaragkos/EventCoalTrain&lt;/PackageProjectUrl&gt;&#10;        &lt;Copyright&gt;Copyright © 2025 Christos Maragkos&lt;/Copyright&gt;&#10;        &lt;IncludeSymbols&gt;true&lt;/IncludeSymbols&gt;&#10;        &lt;SymbolPackageFormat&gt;snupkg&lt;/SymbolPackageFormat&gt;&#10;        &lt;PackageReadmeFile&gt;README.md&lt;/PackageReadmeFile&gt;&#10;    &lt;/PropertyGroup&gt;&#10;&#10;    &lt;ItemGroup&gt;&#10;        &lt;!-- Ensure buildTransitive props are packed so consumers get the EVENTCOALTRAIN symbol --&gt;&#10;        &lt;None Include=&quot;buildTransitive\**\*.*&quot; Pack=&quot;true&quot; PackagePath=&quot;buildTransitive\&quot; /&gt;&#10;        &lt;!-- Include README in the package root --&gt;&#10;        &lt;None Include=&quot;README.md&quot; Pack=&quot;true&quot; PackagePath=&quot;/&quot; /&gt;&#10;    &lt;/ItemGroup&gt;&#10;&#10;&lt;/Project&gt;&#10;" />
              <option name="updatedContent" value="&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;&#10;&#10;    &lt;PropertyGroup&gt;&#10;        &lt;TargetFrameworks&gt;net8.0;netstandard2.1&lt;/TargetFrameworks&gt;&#10;        &lt;LangVersion&gt;latestMajor&lt;/LangVersion&gt;&#10;        &lt;GenerateDocumentationFile&gt;true&lt;/GenerateDocumentationFile&gt;&#10;        &lt;PackageId&gt;EventCoalTrain&lt;/PackageId&gt;&#10;        &lt;Version&gt;1.0.0&lt;/Version&gt;&#10;        &lt;Authors&gt;Christos Maragkos&lt;/Authors&gt;&#10;        &lt;Description&gt;Event system for Godot (.NET 9.0) and Unity (.NET Standard 2.1).&lt;/Description&gt;&#10;        &lt;RepositoryUrl&gt;https://github.com/ChristosMaragkos/EventCoalTrain&lt;/RepositoryUrl&gt;&#10;        &lt;PackageLicenseExpression&gt;MIT&lt;/PackageLicenseExpression&gt;&#10;        &lt;PackageProjectUrl&gt;https://github.com/ChristosMaragkos/EventCoalTrain&lt;/PackageProjectUrl&gt;&#10;        &lt;Copyright&gt;Copyright © 2025 Christos Maragkos&lt;/Copyright&gt;&#10;        &lt;IncludeSymbols&gt;true&lt;/IncludeSymbols&gt;&#10;        &lt;SymbolPackageFormat&gt;snupkg&lt;/SymbolPackageFormat&gt;&#10;        &lt;PackageReadmeFile&gt;README.md&lt;/PackageReadmeFile&gt;&#10;    &lt;/PropertyGroup&gt;&#10;&#10;    &lt;ItemGroup&gt;&#10;        &lt;!-- Ensure buildTransitive props are packed so consumers get the EVENTCOALTRAIN symbol --&gt;&#10;        &lt;None Include=&quot;buildTransitive\**\*.*&quot; Pack=&quot;true&quot; PackagePath=&quot;buildTransitive\&quot; /&gt;&#10;        &lt;!-- Include README in the package root --&gt;&#10;        &lt;None Include=&quot;README.md&quot; Pack=&quot;true&quot; PackagePath=&quot;/&quot; /&gt;&#10;    &lt;/ItemGroup&gt;&#10;&#10;&lt;/Project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/EventHandling/EventBus.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/EventHandling/EventBus.cs" />
              <option name="originalContent" value="#nullable enable&#10;using System;&#10;using System.Collections.Generic;&#10;using EventCoalTrain.EventSource;&#10;using EventCoalTrain.EventStructure;&#10;&#10;namespace EventCoalTrain.EventHandling;&#10;/// &lt;summary&gt;&#10;/// Static wrapper over a thread-safe event bus implementation.&#10;/// &lt;/summary&gt;&#10;public static class EventBus&#10;{&#10;    private static IEventBus _bus = new DefaultEventBus();&#10;&#10;    /// &lt;summary&gt;&#10;    /// Contains all registered event key names (used by EventKey.Of for uniqueness).&#10;    /// &lt;/summary&gt;&#10;    public static readonly HashSet&lt;string&gt; RegisteredKeys = new();&#10;&#10;    /// &lt;summary&gt;&#10;    /// Access the underlying event bus instance (supports IDisposable subscriptions).&#10;    /// &lt;/summary&gt;&#10;    public static IEventBus Instance =&gt; _bus;&#10;&#10;    /// &lt;summary&gt;&#10;    /// Replace the underlying bus implementation.&#10;    /// &lt;/summary&gt;&#10;    public static void Configure(IEventBus bus)&#10;        =&gt; _bus = bus ?? throw new ArgumentNullException(nameof(bus));&#10;&#10;    /// &lt;summary&gt;&#10;    /// Raised when a subscriber throws during publish.&#10;    /// &lt;/summary&gt;&#10;    public static event Action&lt;Exception, IEventKey, Delegate&gt;? OnPublishError&#10;    {&#10;        add { _bus.OnPublishError += value; }&#10;        remove { _bus.OnPublishError -= value; }&#10;    }&#10;&#10;    // Subscribe (legacy shape using Packet/Notification)&#10;    public static void Subscribe&lt;TPayload&gt;(Packet&lt;TPayload&gt; packet, Action&lt;TPayload&gt; handler)&#10;        =&gt; _bus.Subscribe(packet.Key, handler);&#10;&#10;    public static void Subscribe(Notification notification, Action handler)&#10;        =&gt; _bus.Subscribe(notification, handler);&#10;&#10;    // Unsubscribe (legacy shape)&#10;    public static void Unsubscribe&lt;TPayload&gt;(Packet&lt;TPayload&gt; packet, Action&lt;TPayload&gt; handler)&#10;        =&gt; _bus.Unsubscribe(packet.Key, handler);&#10;&#10;    public static void Unsubscribe(Notification notification, Action handler)&#10;        =&gt; _bus.Unsubscribe(notification, handler);&#10;&#10;    // Publish&#10;    public static void Publish&lt;TPayload&gt;(Packet&lt;TPayload&gt; packet) =&gt; _bus.Publish(packet);&#10;    public static void Publish(Notification notification) =&gt; _bus.Publish(notification);&#10;&#10;    // Bulk operations&#10;    public static void UnsubscribeAll(IEventKey key) =&gt; _bus.UnsubscribeAll(key);&#10;    public static bool HasSubscribers(IEventKey key) =&gt; _bus.HasSubscribers(key);&#10;    public static int Count(IEventKey key) =&gt; _bus.Count(key);&#10;    public static void Clear() =&gt; _bus.Clear();&#10;}" />
              <option name="updatedContent" value="#nullable enable&#10;using System;&#10;using System.Collections.Generic;&#10;using EventCoalTrain.EventSource;&#10;using EventCoalTrain.EventStructure;&#10;&#10;namespace EventCoalTrain.EventHandling;&#10;/// &lt;summary&gt;&#10;/// Static wrapper over a thread-safe event bus implementation.&#10;/// &lt;/summary&gt;&#10;public static class EventBus&#10;{&#10;    private static IEventBus _bus = new DefaultEventBus();&#10;&#10;    /// &lt;summary&gt;&#10;    /// Contains all registered event key names (used by EventKey.Of for uniqueness).&#10;    /// &lt;/summary&gt;&#10;    public static readonly HashSet&lt;string&gt; RegisteredKeys = new();&#10;&#10;    /// &lt;summary&gt;&#10;    /// Access the underlying event bus instance (supports IDisposable subscriptions).&#10;    /// &lt;/summary&gt;&#10;    public static IEventBus Instance =&gt; _bus;&#10;&#10;    /// &lt;summary&gt;&#10;    /// Replace the underlying bus implementation.&#10;    /// &lt;/summary&gt;&#10;    public static void Configure(IEventBus bus)&#10;        =&gt; _bus = bus ?? throw new ArgumentNullException(nameof(bus));&#10;&#10;    /// &lt;summary&gt;&#10;    /// Raised when a subscriber throws during publish.&#10;    /// &lt;/summary&gt;&#10;    public static event Action&lt;Exception, IEventKey, Delegate&gt;? OnPublishError&#10;    {&#10;        add { _bus.OnPublishError += value; }&#10;        remove { _bus.OnPublishError -= value; }&#10;    }&#10;&#10;    // Subscribe (legacy shape using Packet/Notification)&#10;    public static void Subscribe&lt;TPayload&gt;(Packet&lt;TPayload&gt; packet, Action&lt;TPayload&gt; handler)&#10;        =&gt; _bus.Subscribe(packet.Key, handler);&#10;&#10;    public static void Subscribe(Notification notification, Action handler)&#10;        =&gt; _bus.Subscribe(notification, handler);&#10;&#10;    // Unsubscribe (legacy shape)&#10;    public static void Unsubscribe&lt;TPayload&gt;(Packet&lt;TPayload&gt; packet, Action&lt;TPayload&gt; handler)&#10;        =&gt; _bus.Unsubscribe(packet.Key, handler);&#10;&#10;    public static void Unsubscribe(Notification notification, Action handler)&#10;        =&gt; _bus.Unsubscribe(notification, handler);&#10;&#10;    // Publish&#10;    public static void Publish&lt;TPayload&gt;(Packet&lt;TPayload&gt; packet) =&gt; _bus.Publish(packet);&#10;    public static void Publish(Notification notification) =&gt; _bus.Publish(notification);&#10;&#10;    // Bulk operations&#10;    public static void UnsubscribeAll(IEventKey key) =&gt; _bus.UnsubscribeAll(key);&#10;    public static bool HasSubscribers(IEventKey key) =&gt; _bus.HasSubscribers(key);&#10;    public static int Count(IEventKey key) =&gt; _bus.Count(key);&#10;    public static void Clear() =&gt; _bus.Clear();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/EventStructure/EventKey.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/EventStructure/EventKey.cs" />
              <option name="originalContent" value="using System;&#10;using EventCoalTrain.EventHandling;&#10;&#10;namespace EventCoalTrain.EventStructure;&#10;&#10;/// &lt;summary&gt;&#10;/// Represents a strongly-typed event key for use with the event bus.&#10;/// Ensures unique registration of event keys by name.&#10;/// Event keys associated with a packet must carry a payload with a specific type,&#10;/// while event keys associated with a notification do not require a payload and can thus&#10;/// be registered with a payload type of &lt;see cref=&quot;Unit&quot;/&gt;.&#10;/// &lt;/summary&gt;&#10;/// &lt;typeparam name=&quot;TPayload&quot;&gt;The type of the event payload.&lt;/typeparam&gt;&#10;public sealed class EventKey&lt;TPayload&gt; : IEventKey&#10;{&#10;    /// &lt;summary&gt;&#10;    /// Gets the name of the event key.&#10;    /// &lt;/summary&gt;&#10;    public string Name { get; }&#10;&#10;    /// &lt;summary&gt;&#10;    /// Initializes a new instance of the &lt;see cref=&quot;EventKey{TPayload}&quot;/&gt; class.&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;name&quot;&gt;The name of the event key.&lt;/param&gt;&#10;    private EventKey(string name)&#10;    {&#10;        Name = name;&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Factory method that creates and registers a new event key with the specified name.&#10;    /// Throws if the name is null, whitespace, or already registered.&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;name&quot;&gt;The name of the event key.&lt;/param&gt;&#10;    /// &lt;returns&gt;A new &lt;see cref=&quot;EventKey{TPayload}&quot;/&gt; instance.&lt;/returns&gt;&#10;    /// &lt;exception cref=&quot;ArgumentException&quot;&gt;Thrown if name is null or whitespace.&lt;/exception&gt;&#10;    /// &lt;exception cref=&quot;InvalidOperationException&quot;&gt;Thrown if the name is already registered.&lt;/exception&gt;&#10;    public static EventKey&lt;TPayload&gt; Of(string name)&#10;    {&#10;        if (string.IsNullOrWhiteSpace(name))&#10;            throw new ArgumentException(&quot;Event key name cannot be null or whitespace.&quot;, nameof(name));&#10;&#10;        lock (EventBus.RegisteredKeys)&#10;        {&#10;            if (!EventBus.RegisteredKeys.Add(name))&#10;                throw new InvalidOperationException($&quot;Event key '{name}' is already registered.&quot;);&#10;        }&#10;&#10;        return new EventKey&lt;TPayload&gt;(name);&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Returns a string representation of the event key.&#10;    /// &lt;/summary&gt;&#10;    /// &lt;returns&gt;A string describing the event key.&lt;/returns&gt;&#10;    public override string ToString() =&gt; $&quot;EventKey&lt;{typeof(TPayload).Name}&gt;: {Name}&quot;;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Determines whether the specified object is equal to the current event key.&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;obj&quot;&gt;The object to compare with the current event key.&lt;/param&gt;&#10;    /// &lt;returns&gt;True if the specified object is equal to the current event key; otherwise, false.&lt;/returns&gt;&#10;    public override bool Equals(object obj)&#10;        =&gt; obj is EventKey&lt;TPayload&gt; other &amp;&amp; other.Name == Name;&#10;&#10;    /// &lt;summary&gt;&#10;    /// Returns a hash code for the event key.&#10;    /// &lt;/summary&gt;&#10;    /// &lt;returns&gt;A hash code for the event key.&lt;/returns&gt;&#10;    public override int GetHashCode()&#10;    {&#10;        unchecked&#10;        {&#10;            int hash = 17;&#10;            hash = hash * 31 + Name.GetHashCode();&#10;            hash = hash * 31 + typeof(TPayload).GetHashCode();&#10;            return hash;&#10;        }&#10;    }&#10;    &#10;#if DEBUG&#10;    /// &lt;summary&gt;&#10;    /// Clears the event key registry for testing purposes. Only available in DEBUG builds.&#10;    /// &lt;/summary&gt;&#10;    public static void ClearRegistryForTesting()&#10;    {&#10;        lock (EventBus.RegisteredKeys)&#10;        {&#10;            EventBus.RegisteredKeys.Clear();&#10;        }&#10;    }&#10;#endif&#10;}" />
              <option name="updatedContent" value="using System;&#10;using EventCoalTrain.EventHandling;&#10;&#10;namespace EventCoalTrain.EventStructure;&#10;&#10;/// &lt;summary&gt;&#10;/// Represents a strongly-typed event key for use with the event bus.&#10;/// Ensures unique registration of event keys by name.&#10;/// Event keys associated with a packet must carry a payload with a specific type,&#10;/// while event keys associated with a notification do not require a payload and can thus&#10;/// be registered with a payload type of &lt;see cref=&quot;Unit&quot;/&gt;.&#10;/// &lt;/summary&gt;&#10;/// &lt;typeparam name=&quot;TPayload&quot;&gt;The type of the event payload.&lt;/typeparam&gt;&#10;public sealed class EventKey&lt;TPayload&gt; : IEventKey&#10;{&#10;    /// &lt;summary&gt;&#10;    /// Gets the name of the event key.&#10;    /// &lt;/summary&gt;&#10;    public string Name { get; }&#10;&#10;    /// &lt;summary&gt;&#10;    /// Initializes a new instance of the &lt;see cref=&quot;EventKey{TPayload}&quot;/&gt; class.&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;name&quot;&gt;The name of the event key.&lt;/param&gt;&#10;    private EventKey(string name)&#10;    {&#10;        Name = name;&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Factory method that creates and registers a new event key with the specified name.&#10;    /// Throws if the name is null, whitespace, or already registered.&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;name&quot;&gt;The name of the event key.&lt;/param&gt;&#10;    /// &lt;returns&gt;A new &lt;see cref=&quot;EventKey{TPayload}&quot;/&gt; instance.&lt;/returns&gt;&#10;    /// &lt;exception cref=&quot;ArgumentException&quot;&gt;Thrown if name is null or whitespace.&lt;/exception&gt;&#10;    /// &lt;exception cref=&quot;InvalidOperationException&quot;&gt;Thrown if the name is already registered.&lt;/exception&gt;&#10;    public static EventKey&lt;TPayload&gt; Of(string name)&#10;    {&#10;        if (string.IsNullOrWhiteSpace(name))&#10;            throw new ArgumentException(&quot;Event key name cannot be null or whitespace.&quot;, nameof(name));&#10;&#10;        lock (EventBus.RegisteredKeys)&#10;        {&#10;            if (!EventBus.RegisteredKeys.Add(name))&#10;                throw new InvalidOperationException($&quot;Event key '{name}' is already registered.&quot;);&#10;        }&#10;&#10;        return new EventKey&lt;TPayload&gt;(name);&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Returns a string representation of the event key.&#10;    /// &lt;/summary&gt;&#10;    /// &lt;returns&gt;A string describing the event key.&lt;/returns&gt;&#10;    public override string ToString() =&gt; $&quot;EventKey&lt;{typeof(TPayload).Name}&gt;: {Name}&quot;;&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Determines whether the specified object is equal to the current event key.&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;obj&quot;&gt;The object to compare with the current event key.&lt;/param&gt;&#10;    /// &lt;returns&gt;True if the specified object is equal to the current event key; otherwise, false.&lt;/returns&gt;&#10;    public override bool Equals(object obj)&#10;        =&gt; obj is EventKey&lt;TPayload&gt; other &amp;&amp; other.Name == Name;&#10;&#10;    /// &lt;summary&gt;&#10;    /// Returns a hash code for the event key.&#10;    /// &lt;/summary&gt;&#10;    /// &lt;returns&gt;A hash code for the event key.&lt;/returns&gt;&#10;    public override int GetHashCode()&#10;    {&#10;        unchecked&#10;        {&#10;            int hash = 17;&#10;            hash = hash * 31 + Name.GetHashCode();&#10;            hash = hash * 31 + typeof(TPayload).GetHashCode();&#10;            return hash;&#10;        }&#10;    }&#10;    &#10;#if DEBUG&#10;    /// &lt;summary&gt;&#10;    /// Clears the event key registry for testing purposes. Only available in DEBUG builds.&#10;    /// &lt;/summary&gt;&#10;    public static void ClearRegistryForTesting()&#10;    {&#10;        lock (EventBus.RegisteredKeys)&#10;        {&#10;            EventBus.RegisteredKeys.Clear();&#10;        }&#10;    }&#10;#endif&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>